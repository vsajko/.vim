snippet logstderr "Print dummy log var to stderr"
import sys; print >>sys.stderr, "\n-------\n ${1:varname}: %s \n-------\n" % $1
endsnippet

snippet logging "Print using logging pprint message"
import pprint; logging.debug("\n-------\n${1:varname}: %s \n-------\n" % pprint.pformat($1))
endsnippet

snippet logformat "pathname and lineno in logformat"
"format": '%(asctime)s => (%(process)d) %(pathname)s %(lineno)d [%(levelname)s] %(message)s'
endsnippet

snippet dcsession "dc dc db session" i
self.app.db
endsnippet

snippet dcquery "dc query" i
self.app.db.query(${1:varname})
endsnippet

snippet dcapi "dc api decorator"
@simple_access
@gen.coroutine
endsnippet

snippet dclog "dc logging"
self.app.log.
endsnippet

snippet ipython "ipython debugging"
from IPython import embed; embed()
endsnippet

snippet "rpdb2"
import rpdb2
rpdb2.start_embedded_debugger("${1:xxx}", fAllowUnencrypted=True, fAllowRemote=True)
endsnippet

snippet "remote_pdb"
from remote_pdb import RemotePdb
RemotePdb(host='10.${1:ip}', port=4444).set_trace()
endsnippet

snippet "logger_getLogger"
logger = logging.getLogger(__name__)
endsnippet

snippet "logger"
logger.${1:debug}("${2} %s", ${3})
endsnippet

snippet with_open
with open('${1:filename}', 'r') as ${2:filevar}:
	for line in $2:
		# do something with line
$2.closed
endsnippet
